{"version":3,"file":"static/js/703.c2fb0999.chunk.js","mappings":"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","sources":["pages/Home/components/DefinitionCountGraph.tsx","pages/Home/components/DataSetCountGraph.tsx","pages/Home/components/MostDefinitionMemberGraph.tsx","pages/Home/components/MostDefinitionTagGraph.tsx","pages/Home/Home.tsx","api/summary.ts"],"sourcesContent":["import React from 'react'\nimport { Line } from 'react-chartjs-2'\nimport { SummaryDefinitionCount } from '../../../types/summary'\nimport { GRAPH_OPTIONS } from '../../../configs/constants'\n\ntype Props = {\n  data: SummaryDefinitionCount[]\n}\n\nconst DefinitionCountGraph = ({ data }: Props): JSX.Element => {\n  const graphData = {\n    labels: data?.map((item: SummaryDefinitionCount): string => item.date),\n    datasets: [\n      {\n        babel: '# of Datasets',\n        data: data?.map((item: SummaryDefinitionCount): number => item.count),\n        backgroundColor: 'rgba(255, 99, 132, 0.4)',\n        borderColor: 'rgb(255, 99, 132)',\n        fill: true,\n      },\n    ],\n  }\n  return <Line data={graphData} options={GRAPH_OPTIONS} />\n}\n\nexport default DefinitionCountGraph\n","import React from 'react'\nimport { Line } from 'react-chartjs-2'\nimport { SummaryDatasetCount } from '../../../types/summary'\nimport { GRAPH_OPTIONS } from '../../../configs/constants'\n\ntype Props = {\n  data: SummaryDatasetCount[]\n}\n\nconst DataSetCountGraph = ({ data }: Props): JSX.Element => {\n  const graphData = {\n    labels: data?.map((item: SummaryDatasetCount): string => item.date),\n    datasets: [\n      {\n        babel: '# of Datasets',\n        data: data?.map((item: SummaryDatasetCount): number => item.count),\n        backgroundColor: 'rgba(6, 207, 9, 0.3)',\n        borderColor: 'rgb(6, 207, 9)',\n        fill: true,\n      },\n    ],\n  }\n  return <Line data={graphData} options={GRAPH_OPTIONS} />\n}\n\nexport default DataSetCountGraph\n","import React from 'react'\nimport { Doughnut } from 'react-chartjs-2'\nimport { SummaryDefinitionMember } from '../../../types/summary'\n\ntype Props = {\n  data: SummaryDefinitionMember[]\n}\n\nconst MostDefinitionMemberGraph = ({ data }: Props): JSX.Element => {\n  const graphData = {\n    labels: data?.map((item: SummaryDefinitionMember): string => item?.name),\n    datasets: [\n      {\n        data: data?.map((item: SummaryDefinitionMember): number => item?.count),\n        backgroundColor: [\n          '#5B8FF9',\n          '#CDDDFD',\n          '#61DDAA',\n          '#CDF3E4',\n          '#65789B',\n          '#CED4DE',\n          '#F6BD16',\n          '#FCEBB9',\n          '#7262FD',\n          '#D3CEFD',\n          '#CCCCCC',\n        ],\n      },\n    ],\n  }\n  return <Doughnut data={graphData} />\n}\n\nexport default MostDefinitionMemberGraph\n","import React from 'react'\nimport { Doughnut } from 'react-chartjs-2'\nimport { SummaryDefinitionTag } from '../../../types/summary'\n\ntype Props = {\n  data: SummaryDefinitionTag[]\n}\n\nconst MostDefinitionTagGraph = ({ data }: Props): JSX.Element => {\n  const graphData = {\n    labels: data?.map((item: SummaryDefinitionTag): string => item?.name),\n    datasets: [\n      {\n        data: data?.map((item: SummaryDefinitionTag): number => item?.count),\n        backgroundColor: [\n          '#78D3F8',\n          '#D3EEF9',\n          '#9661BC',\n          '#DECFEA',\n          '#F6903D',\n          '#FFE0C7',\n          '#008685',\n          '#BBDEDE',\n          '#F08BB4',\n          '#FFE0ED',\n          '#CCCCCC',\n        ] as string[],\n      },\n    ],\n  }\n  return <Doughnut data={graphData} />\n}\n\nexport default MostDefinitionTagGraph\n","import React from 'react'\nimport { Card, Col, Row, Typography, Spin } from 'antd'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from 'chart.js'\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement\n)\nimport {\n  useSummaryDefinitionTag,\n  useSummaryDatasetCount,\n  useSummaryDefinitionCount,\n  useSummaryDefinitionMember,\n} from '../../api/summary'\nimport DefinitionCountGraph from './components/DefinitionCountGraph'\nimport DataSetCountGraph from './components/DataSetCountGraph'\nimport MostDefinitionMemberGraph from './components/MostDefinitionMemberGraph'\nimport MostDefinitionTagGraph from './components/MostDefinitionTagGraph'\n\nconst Home = (): JSX.Element => {\n  const {\n    data: defTag,\n    isLoading: defTagIsLoading,\n    isRefetching: defTagIsRefetching,\n  } = useSummaryDefinitionTag()\n  const {\n    data: defMember,\n    isLoading: defMemberIsLoading,\n    isRefetching: defMemberIsRefetching,\n  } = useSummaryDefinitionMember()\n  const {\n    data: defCount,\n    isLoading: defCountIsLoading,\n    isRefetching: defCountIsRefetching,\n  } = useSummaryDefinitionCount(12)\n  const {\n    data: dataSetCount,\n    isLoading: dataSetCountIsLoading,\n    isRefetching: dataSetCountIsRefetching,\n  } = useSummaryDatasetCount(12)\n\n  return (\n    <>\n      <Row>\n        <Col span={12}>\n          <Card>\n            <Typography.Title level={5}>\n              No. of Definitions by time\n            </Typography.Title>\n            <Spin spinning={defCountIsLoading || defCountIsRefetching}>\n              <DefinitionCountGraph data={defCount ?? []} />\n            </Spin>\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card>\n            <Typography.Title level={5}>\n              No. of Datasets by time\n            </Typography.Title>\n            <Spin spinning={dataSetCountIsLoading || dataSetCountIsRefetching}>\n              <DataSetCountGraph data={dataSetCount ?? []} />\n            </Spin>\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card>\n            <Typography.Title level={5}>\n              Most member Definition\n            </Typography.Title>\n            <Spin spinning={defMemberIsLoading || defMemberIsRefetching}>\n              <MostDefinitionMemberGraph data={defMember ?? []} />\n            </Spin>\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card>\n            <Typography.Title level={5}>Most Tagged</Typography.Title>\n            <Spin spinning={defTagIsLoading || defTagIsRefetching}>\n              <MostDefinitionTagGraph data={defTag ?? []} />\n            </Spin>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nexport default Home\n","import { useQuery } from 'react-query'\nimport { useAxios } from '../libs/axios'\nimport { useUser } from '../hooks/useUser'\nimport {\n  SummaryDefinitionTag,\n  SummaryDefinitionMember,\n  SummaryDefinitionCount,\n  SummaryDatasetCount,\n} from '../types/summary'\n\nexport const useSummaryDefinitionTag = (): {\n  data: SummaryDefinitionTag[] | undefined\n  isLoading: boolean\n  isRefetching: boolean\n} => {\n  const axios = useAxios()\n  const { channel } = useUser()\n  const channel_id = channel.id ? channel.id : '' //temp data\n  const { data, isLoading, isRefetching } = useQuery({\n    queryKey: ['getSummaryDefinitionTag', channel_id],\n    queryFn: () =>\n      axios\n        .get<SummaryDefinitionTag[]>(\n          `/channel/${String(channel_id)}/definition/tag`\n        )\n        .then((response) => response.data)\n  })\n  return { data, isLoading, isRefetching }\n}\n\nexport const useSummaryDefinitionMember = (): {\n  data: SummaryDefinitionMember[] | undefined\n  isLoading: boolean\n  isRefetching: boolean\n} => {\n  const axios = useAxios()\n  const { channel } = useUser()\n  const channel_id = channel.id ? channel.id : '' //temp data\n  const { data, isLoading, isRefetching } = useQuery({\n    queryKey: ['getSummaryDefinitionMember', channel_id],\n    queryFn: () =>\n      axios\n        .get<SummaryDefinitionMember[]>(\n          `/channel/${String(channel_id)}/definition/member`\n        )\n        .then((response) => response.data)\n  })\n  return { data, isLoading, isRefetching }\n}\n\nexport const useSummaryDefinitionCount = (\n  limit: number\n): {\n  data: SummaryDefinitionCount[] | undefined\n  isLoading: boolean\n  isRefetching: boolean\n} => {\n  const axios = useAxios()\n  const { channel } = useUser()\n  const channel_id = channel.id ? channel.id : '' //temp data\n  const { data, isLoading, isRefetching } = useQuery({\n    queryKey: ['getSummaryDefinitionCount', channel_id, limit],\n    queryFn: () =>\n      axios\n        .get<SummaryDefinitionCount[]>(\n          `/channel/${String(channel_id)}/definition/summary?limit=${limit}`\n        )\n        .then((response) => response.data)\n  })\n  return { data, isLoading, isRefetching }\n}\n\nexport const useSummaryDatasetCount = (\n  limit: number\n): {\n  data: SummaryDatasetCount[] | undefined\n  isLoading: boolean\n  isRefetching: boolean\n} => {\n  const axios = useAxios()\n  const { channel } = useUser()\n  const channel_id = channel.id ? channel.id : '' //temp data\n  const { data, isLoading, isRefetching } = useQuery({\n    queryKey: ['getSummaryDatasetCount', channel_id, limit],\n    queryFn: () =>\n      axios\n        .get<SummaryDatasetCount[]>(\n          `/channel/${String(channel_id)}/data-set/summary?limit=${limit}`\n        )\n        .then((response) => response.data)\n  })\n  return { data, isLoading, isRefetching }\n}\n"],"names":["data","graphData","labels","map","item","date","datasets","babel","count","backgroundColor","borderColor","fill","options","GRAPH_OPTIONS","name","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","axios","useAxios","channel","useUser","channel_id","id","useQuery","queryKey","queryFn","get","String","then","response","isLoading","isRefetching","useSummaryDefinitionTag","defTag","defTagIsLoading","defTagIsRefetching","useSummaryDefinitionMember","defMember","defMemberIsLoading","defMemberIsRefetching","limit","useSummaryDefinitionCount","defCount","defCountIsLoading","defCountIsRefetching","useSummaryDatasetCount","dataSetCount","dataSetCountIsLoading","dataSetCountIsRefetching","span","level","spinning"],"sourceRoot":""}