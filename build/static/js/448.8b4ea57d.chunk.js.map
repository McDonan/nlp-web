{"version":3,"file":"static/js/448.8b4ea57d.chunk.js","mappings":"4PAaMA,EAAW,SAACC,GAChB,OAAOA,EAAKC,QAiDd,EA9C2B,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAC5BC,GAAQC,EAAAA,EAAAA,UAAQ,WACpB,cAAOH,QAAP,IAAOA,OAAP,EAAOA,EAAMI,OAAOP,GAAUQ,KAAI,SAACP,GACjC,OAAO,QACLQ,IAAG,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAMS,IACRT,QAGN,CAACE,IAYJ,OACE,SAAC,IAAD,CACEQ,KAAK,QACLC,OAAQ,CACNC,UACE,mFAEJC,WAAU,OAAET,QAAF,IAAEA,EAAAA,EAAS,GACrBU,QAnBY,CACd,CACEC,MAAO,eACPP,IAAK,OACLQ,MAAO,OACPC,UAAW,OACXC,OAAQ,SAACC,EAAYC,GAAb,eACN,UAACD,EAAEE,YAAH,QAAW,IAAIC,cAAf,UAA6BF,EAAEC,YAA/B,QAAuC,OAazCE,OAAQ,CAAEC,EAAG,qBACbC,WAAY,CACVC,gBAAiBC,EAAAA,GACjBC,gBAAiBC,EAAAA,IAEnBC,MAAO,SAACC,GACN,MAAO,CACLC,QAAS,WACP7B,EAAS4B,S,SCnDbE,EAAUC,EAAAA,EAAAA,MA4BlB,EApB0B,WAAO,IAAD,EAC9B,GAAiCC,EAAAA,EAAAA,KAAzBC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,SACpB,ECF2B,SAC3B5B,GASA,IAAM6B,GAAQC,EAAAA,EAAAA,MACd,GAAmDC,EAAAA,EAAAA,UAAS,CAC1DC,SAAU,CAda,oBAevBC,QAAS,kBACPJ,EAAMK,IAAN,iBAA0BlC,IAAMmC,MAAK,SAACC,GAAD,OAAcA,EAAS3C,WAEhE,MAAO,CAAEA,KALT,EAAQA,KAKO4C,UALf,EAAcA,UAKYC,QAL1B,EAAyBA,QAKUC,aALnC,EAAkCA,cDTQC,CAAa,iBAACZ,QAAD,IAACA,OAAD,EAACA,EAAU5B,UAAX,QAAiB,IAAhEP,EAAR,EAAQA,KAAM4C,EAAd,EAAcA,UAAWE,EAAzB,EAAyBA,aACnBE,GAAWC,EAAAA,EAAAA,MAOjB,OACE,iCACE,SAAClB,EAAD,CAAOmB,MAAO,EAAd,8BACA,SAAC,IAAD,CAAMC,SAAUP,GAAaE,EAA7B,UACE,SAAC,EAAD,CAAoB9C,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMoD,SAAUnD,SAV5B,SAAC4B,GACnBK,EAAWL,GACXwB,aAAaC,QAAQ,UAAWC,KAAKC,UAAU3B,IAC/CmB,EAAS","sources":["pages/SelectChannel/components/SelectChannelTable.tsx","pages/SelectChannel/SelectChannelPage.tsx","api/selectChannel.ts"],"sourcesContent":["import React, { useMemo } from 'react'\nimport { Table } from 'antd'\nimport { Channel } from '../../../types/channel'\nimport {\n  DEFAULT_PAGE_SIZE,\n  PAGE_SIZE_OPTIONS,\n} from '../../../configs/constants'\n\ntype Props = {\n  data: Channel[] | undefined\n  onSelect: (record: Channel) => void\n}\n\nconst isActive = (item: Channel) => {\n  return item.active\n}\n\nconst SelectChannelTable = ({ data, onSelect }: Props) => {\n  const items = useMemo(() => {\n    return data?.filter(isActive).map((item: Channel): Channel => {\n      return {\n        key: item?.id,\n        ...item,\n      }\n    })\n  }, [data])\n  const columns = [\n    {\n      title: 'Channel name',\n      key: 'name',\n      width: '100%',\n      dataIndex: 'name',\n      sorter: (a: Channel, b: Channel) =>\n        (a.name ?? '').localeCompare(b.name ?? ''),\n    },\n  ]\n\n  return (\n    <Table\n      size=\"small\"\n      locale={{\n        emptyText:\n          'Please request channel access permission via ITSM or contact ITID administrator',\n      }}\n      dataSource={items ?? []}\n      columns={columns}\n      scroll={{ y: 'calc(75vh - 4rem)' }}\n      pagination={{\n        defaultPageSize: DEFAULT_PAGE_SIZE,\n        pageSizeOptions: PAGE_SIZE_OPTIONS,\n      }}\n      onRow={(record) => {\n        return {\n          onClick: () => {\n            onSelect(record)\n            \n          },\n        }\n      }}\n    />\n  )\n}\n\nexport default SelectChannelTable\n","import React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Spin, Typography } from 'antd'\nconst { Title } = Typography\nimport { Channel } from '../../types/channel'\nimport { useGetChannel } from '../../api/selectChannel'\nimport SelectChannelTable from './components/SelectChannelTable'\n\n//got permission\nimport { useUser } from '../../hooks/useUser'\n\nconst SelectChannelPage = () => {\n  const { setChannel, userData } = useUser()\n  const { data, isLoading, isRefetching } = useGetChannel(userData?.id ?? '')\n  const navigate = useNavigate()\n  const handleClick = (record: Channel) => {\n    setChannel(record)\n    localStorage.setItem('channel', JSON.stringify(record))\n    navigate('/')\n  }\n\n  return (\n    <>\n      <Title level={5}>Channel Service</Title>\n      <Spin spinning={isLoading || isRefetching}>\n        <SelectChannelTable data={data?.channels} onSelect={handleClick} />\n      </Spin>\n    </>\n  )\n}\n\nexport default SelectChannelPage\n","import {\n  QueryObserverResult,\n  RefetchOptions,\n  RefetchQueryFilters,\n  useQuery,\n} from 'react-query'\nimport { useAxios } from '../libs/axios'\nimport { User } from '../types/users'\n\nconst queryKeyGetChannel = 'getSelectChannel'\n\nexport const useGetChannel = (\n  id: string\n): {\n  data: User | undefined\n  isLoading: boolean\n  refetch: <TPageData>(\n    options?: (RefetchOptions & RefetchQueryFilters<TPageData>) | undefined\n  ) => Promise<QueryObserverResult<User, unknown>>\n  isRefetching: boolean\n} => {\n  const axios = useAxios()\n  const { data, isLoading, refetch, isRefetching } = useQuery({\n    queryKey: [queryKeyGetChannel],\n    queryFn: () =>\n      axios.get<User>(`/users/${id}`).then((response) => response.data)\n  })\n  return { data, isLoading, refetch, isRefetching }\n}\n"],"names":["isActive","item","active","data","onSelect","items","useMemo","filter","map","key","id","size","locale","emptyText","dataSource","columns","title","width","dataIndex","sorter","a","b","name","localeCompare","scroll","y","pagination","defaultPageSize","DEFAULT_PAGE_SIZE","pageSizeOptions","PAGE_SIZE_OPTIONS","onRow","record","onClick","Title","Typography","useUser","setChannel","userData","axios","useAxios","useQuery","queryKey","queryFn","get","then","response","isLoading","refetch","isRefetching","useGetChannel","navigate","useNavigate","level","spinning","channels","localStorage","setItem","JSON","stringify"],"sourceRoot":""}